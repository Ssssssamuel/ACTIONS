name: Deploy After Approval_1

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
  IMAGE_TAG: "1.0.${{ github.run_number }}"
  TERRAFORM_WORKING_DIR: ./

jobs:
  # ðŸŸ¢ Step 5: Tear Down Docker Container & RDS Database
  tear-down-env:
    name: Tear Down Environment
    runs-on: ubuntu-latest
    needs: test-app

    steps:
      - name: Stop and Remove Docker Container
        run: |
          docker stop clixx-cont || true
          docker rm clixx-cont || true

      - name: Install Ansible & AWS CLI
        run: |
          sudo apt update
          sudo apt install -y python3-pip ansible awscli
          pip3 install boto3 botocore

      - name: Run Ansible Playbook to Delete RDS Database
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ansible-playbook -vvv deploy_db_ansible/delete_db.yml

  # ðŸŸ¢ Step 6: Push Docker Image to ECR
  push-to-ecr:
    name: Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: tear-down-env

    steps:
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI

      - name: Push Docker Image to ECR
        run: |
          docker push $ECR_REPOSITORY_URI:clixx-image-$IMAGE_TAG
          docker push $ECR_REPOSITORY_URI:latest

  # ðŸŸ¢ Step 7: Deploy to AWS ECS with Terraform
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: push-to-ecr

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Step 9: Terraform Plan
      - name: Terraform Plan
        run: |
          export TF_LOG=DEBUG
          terraform plan -lock=false -input=false

      # Step 10: Terraform Apply
      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve -lock=false

      # Optional Step: Clean up temporary files
      - name: Clean up
        if: always()
        run: |
          rm -f terraform.tfvars
