name: Deploy to AWS with Terraform

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_REGION: us-east-1
  TERRAFORM_WORKING_DIR: ./

jobs:
  terraform:
    name: Terraform CI/CD Pipeline
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6

    # Step 3: Configure AWS Credentials (for Management Account)
    - name: Configure AWS Credentials (Management Account)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 4: Assume Role into Dev Account (Engineer Role)
    - name: Assume Engineer Role in Dev Account
      id: assume_role
      run: |
        ROLE_ARN=${{ secrets.AWS_ROLE_ARN }}
        CREDENTIALS=$(aws sts assume-role \
          --role-arn $ROLE_ARN \
          --role-session-name terraform-session \
          --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
          --output text)
        
        # Set AWS credentials environment variables
        echo "AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | awk '{print $1}')" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | awk '{print $2}')" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=$(echo $CREDENTIALS | awk '{print $3}')" >> $GITHUB_ENV

    # Step 5: Generate terraform.tfvars
    - name: Generate terraform.tfvars
      run: |
        echo "${{ secrets.TFVARS_CONTENT }}" > terraform.tfvars

    # Step 6: Create Public Key File
    - name: Generate Public Key File
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PUBLIC_KEY_CONTENT }}" > ~/.ssh/generated_key.pub

    # Step 7: Terraform Init
    - name: Terraform Init
      run: terraform init

    # Step 8: Terraform Plan
    - name: Terraform Plan
      run: terraform plan -var "PATH_TO_PUBLIC_KEY=~/.ssh/generated_key.pub"

    # Step 9: Manual Approval
    - name: Await Manual Approval
      if: github.event_name == 'push'
      uses: hmarr/auto-approve-action@v3

    # Step 10: Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve -var "PATH_TO_PUBLIC_KEY=~/.ssh/generated_key.pub"

    # Optional Step: Clean up temporary files
    - name: Clean up
      if: always()
      run: |
        rm -f terraform.tfvars
        rm -f ~/.ssh/generated_key.pub
