name: Deploy to AWS with Terraform

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_REGION: us-east-1
  TERRAFORM_WORKING_DIR: ./

jobs:
  terraform:
    name: Terraform CI/CD Pipeline
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Step 3: Configure AWS Credentials (for Management Account)
      - name: Configure AWS Credentials (Management Account)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Export AWS Credentials
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ env.AWS_REGION }}
 

      # Step 8: Terraform Init
      - name: Run Terraform Init
        run: |
            rm -rf .terraform/modules
            rm -rf .terraform/providers
            rm -rf .terraform
            terraform init             
        env:
          TF_LOG: DEBUG
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # Step 9: Terraform Plan
      - name: Terraform Plan
        run: |
          export TF_LOG=DEBUG
          terraform plan -lock=false -input=false

      # Step 10: Terraform Apply
      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve 

      # Optional Step: Clean up temporary files
      - name: Clean up
        if: always()
        run: |
          rm -f terraform.tfvars
          rm -f test_key.pub
